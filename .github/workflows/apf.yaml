name: Tests

on:
  pull_request:
    branches:
      - main
    paths:
      - 'libs/apf/**'
      - '!libs/apf/docs/**'
      - '!libs/apf/README.md'

jobs:
  libs_apf_lint:
    uses: ./.github/workflows/lint-template.yaml
    with:
      base-folder: 'libs/apf'
      sources-folder: 'apf'
  libs_apf_unittest:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'libs/apf'
      sources-folder: 'apf'
      test-folder: 'tests'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  reflector_step_unittest:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
        python-version: '3.7'
        sources-folder: 'reflector_step'
        test-folder: 'tests/unittest'
        base-folder: 'reflector_step'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  reflector_step_integration:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      python-version: '3.7'
      sources-folder: 'reflector_step'
      base-folder: 'reflector_step'
      test-folder: 'tests/integration'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  sorting_hat_step_unittest:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'sorting_hat_step'
      python-version: '3.8'
      sources-folder: 'sorting_hat_step'
      test-folder: 'tests/unittest'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  sorting_hat_step_integration:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'sorting_hat_step'
      python-version: '3.8'
      sources-folder: 'sorting_hat_step'
      test-folder: 'tests/integration'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  prv_candidates_step_unittest:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'prv_candidates_step'
      python-version: "3.8"
      test-folder: "tests/unit"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  prv_candidates_step_integration:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'prv_candidates_step'
      python-version: '3.8'
      sources-folder: 'prv_candidates_step'
      test-folder: 'tests/integration'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  lightcurve_step_unittest:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'lightcurve-step'
      python-version: "3.9"
      test-folder: "tests/unittest"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  lightcurve_step_integration:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'lightcurve-step'
      python-version: "3.9"
      test-folder: "tests/integration"
      codecov-flags: "" # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  correction_step_unittest:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'correction_step'
      sources-folder: 'correction'
      test-folder: 'tests/unittests'
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  correction_step_integration:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'correction_step'
      sources-folder: 'correction'
      test-folder: 'tests/integration'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  xmatch_step_unittest:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'xmatch_step'
      python-version: "3.7"
      test-folder: "tests/unittest"
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  xmatch_step_integration:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'xmatch_step'
      python-version: '3.7'
      sources-folder: 'xmatch_step'
      test-folder: 'tests/integration'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  lc_classification_step_unittest:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'lc_classification_step'
      python-version: '3.8'
      poetry-install: "--with ztf --with elasticc"
      test-folder: "tests/unit"
    secrets:
      GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
      TEST_BALTO_MODEL_PATH: "${{ secrets.TEST_BALTO_MODEL_PATH }}"
      TEST_BALTO_QUANTILES_PATH: "${{ secrets.TEST_BALTO_QUANTILES_PATH }}"
      TEST_MESSI_MODEL_PATH: "${{ secrets.TEST_MESSI_MODEL_PATH }}"
      TEST_MESSI_HEADER_QUANTILES_PATH: "${{ secrets.TEST_MESSI_HEADER_QUANTILES_PATH }}"
      TEST_MESSI_FEATURE_QUANTILES_PATH: "${{ secrets.TEST_MESSI_FEATURE_QUANTILES_PATH }}"
      TEST_TORETTO_MODEL_PATH: "${{ secrets.TEST_TORETTO_MODEL_PATH }}"
      TEST_BARNEY_MODEL_PATH: "${{ secrets.TEST_BARNEY_MODEL_PATH }}"
      TEST_NEW_BARNEY_MODEL_PATH: "${{ secrets.TEST_NEW_BARNEY_MODEL_PATH }}"
      TEST_MLP_MODEL_PATH: "${{ secrets.TEST_MLP_MODEL_PATH }}"
  lc_classification_step_integration:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      base-folder: 'lc_classification_step'
      python-version: '3.8'
      codecov-flags: ''  # Do not upload
      poetry-install: "--with ztf --with elasticc"
      test-folder: "tests/integration"
    secrets:
      GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
      TEST_BALTO_MODEL_PATH: "${{ secrets.TEST_BALTO_MODEL_PATH }}"
      TEST_BALTO_QUANTILES_PATH: "${{ secrets.TEST_BALTO_QUANTILES_PATH }}"
      TEST_MESSI_MODEL_PATH: "${{ secrets.TEST_MESSI_MODEL_PATH }}"
      TEST_MESSI_HEADER_QUANTILES_PATH: "${{ secrets.TEST_MESSI_HEADER_QUANTILES_PATH }}"
      TEST_MESSI_FEATURE_QUANTILES_PATH: "${{ secrets.TEST_MESSI_FEATURE_QUANTILES_PATH }}"
      TEST_TORETTO_MODEL_PATH: "${{ secrets.TEST_TORETTO_MODEL_PATH }}"
      TEST_BARNEY_MODEL_PATH: "${{ secrets.TEST_BARNEY_MODEL_PATH }}"
      TEST_NEW_BARNEY_MODEL_PATH: "${{ secrets.TEST_NEW_BARNEY_MODEL_PATH }}"
      TEST_MLP_MODEL_PATH: "${{ secrets.TEST_MLP_MODEL_PATH }}"


  feature_step_unittest:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      python-version: '3.10'
      base-folder: 'feature_step'
      sources-folder: 'features'
      test-folder: 'tests/unittest'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
  feature_step_integration:
    uses: ./.github/workflows/poetry-tests-template.yaml
    with:
      python-version: '3.10'
      base-folder: 'feature_step'
      sources-folder: 'features/'
      test-folder: 'tests/integration'
      codecov-flags: ''  # Do not upload
    secrets:
      GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  build-correction-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: correction_step --dry-run
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-early-classification-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: early_classification_step --dry-run
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-feature-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: feature_step --dry-run
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-lc-classification-balto-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: lc_classification_step_balto --build-args=model:balto --package-dir=lc_classification_step --dry-run
        submodules: true
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-lc-classification-mlp-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: lc_classification_step_mlp --build-args=model:mlp --package-dir=lc_classification_step --dry-run
        submodules: true
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-lc-classification-messi-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: lc_classification_step_messi --build-args=model:messi --package-dir=lc_classification_step --dry-run
        submodules: true
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-lc-classification-ztf-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: lc_classification_step_ztf --build-args=model:ztf --package-dir=lc_classification_step --dry-run
        submodules: true
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-lightcurve-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: lightcurve-step --dry-run
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-magstats-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: magstats_step --dry-run
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-prv-candidates-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: prv_candidates_step --dry-run
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-s3-step-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: s3_step --dry-run
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-scribe-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: scribe --dry-run
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-sorting-hat-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: sorting_hat_step --dry-run
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-watchlist-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: watchlist_step --dry-run
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}

  build-xmatch-dagger:
    needs: update-packages-dagger
    uses: ./.github/workflows/template_build_with_dagger.yaml
    with:
        stage: staging
        extra-args: xmatch_step --dry-run
    secrets:
        GH_TOKEN: ${{ secrets.ADMIN_TOKEN }}
