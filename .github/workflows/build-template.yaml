name: Build_template
on:
  workflow_call:
    inputs:
      base-folder:
        required: false
        type: string
        default: '.'
      file:
        required: false
        type: string
        default: 'Dockerfile'
      build-context:
        required: false
        type: string
        default: '.'
      step-name:
        required: true
        type: string
      step-name-prefix:
        required: false
        type: string
        default: "monorepo_"
      build-type:
        required: false
        type: string
        default: "develop"
      git-ref:
        required: false
        type: string
        default: "main"
      publish-github:
        required: false
        type: string
        default: 'true'
      publish-pypi:
        required: false
        type: string
        default: 'false'
    secrets:
      GH_TOKEN:
        required: false

jobs:
  get_tags:
    env:
      STEP_NAME: '${{ inputs.step-name-prefix}}${{ inputs.step-name }}'
      BUILD_TYPE: ${{ inputs.build-type }}
      POETRY_HOME: /opt/poetry
    name: get tags
    outputs:
      tags: ${{ steps.prep.outputs.tags }}
      push: ${{ steps.prep.outputs.push }}
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'pip'
      - name: Install poetry
        run: |
          pip install --upgrade pip
          python3 -m venv $POETRY_HOME
          $POETRY_HOME/bin/pip install poetry
          $POETRY_HOME/bin/poetry --version
      - name: Prepare
        id: prep
        run: |
          if [[ $BUILD_TYPE == production* ]]; then
            BUILD_TYPE=latest
            PUSH=true
          elif [[ $BUILD_TYPE == staging* ]]; then
            BUILD_TYPE=rc
            PUSH=true
          else
            PUSH=false
          fi
          cd ${{ inputs.base-folder }}
          DOCKER_IMAGE=ghcr.io/alercebroker/${STEP_NAME}
          VERSION=$($POETRY_HOME/bin/poetry version --short)
          TAGS="${DOCKER_IMAGE}:${VERSION},${DOCKER_IMAGE}:${BUILD_TYPE}"
          echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"
          echo "push=${PUSH}" >> "$GITHUB_OUTPUT"

  github_push:
    if: ${{ inputs.publish-github }} == 'true'
    name: Push Docker image to GitHub Packages
    needs: get_tags
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Push to GitHub Packages
        uses: docker/build-push-action@v4
        with:
          context: ./${{ inputs.build-context }}
          file: ./${{ inputs.base-folder }}/${{ inputs.file }}
          push: ${{needs.get_tags.outputs.push}}
          tags: ${{needs.get_tags.outputs.tags}}
          build-args: |
            GH_TOKEN=${{secrets.GH_TOKEN}}

  pypi_push:
    env:
      POETRY_HOME: /opt/poetry
    if: ${{ inputs.publish-pypi }} == 'true'
    name: Publish Python distribution to PyPI
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: 'pip'
      - name: Install poetry
        run: |
          pip install --upgrade pip
          python3 -m venv $POETRY_HOME
          $POETRY_HOME/bin/pip install poetry
          $POETRY_HOME/bin/poetry --version
      - name: Install dependencies
        run: |
          cd ${{ inputs.base-folder }}
          $POETRY_HOME/bin/poetry config http-basic.git alerceadmin ${{ secrets.GH_TOKEN }}
          $POETRY_HOME/bin/poetry install
      - name: Build a binary wheel and a source tarball
        run: |
          $POETRY_HOME/bin/poetry build
      - name: Publish Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}