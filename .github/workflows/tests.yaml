name: Tests_alerce-reflector-step

on:
  pull_request:
    branches:
      - main

jobs:
  detect_changes:
    uses: ./.github/workflows/detect_changes.yaml

  alerce_reflector_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.alerce_reflector_step == 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 'alerce-reflector-step/alerce-reflector-step/'
      - name: unittest
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.7'
          sources-folder: 'alerce-reflector-step/alerce-reflector-step/'
          test-folder: 'alerce-reflector-step/tests/unittest'
          test-dependencies: 'pytest pytest-docker pytest-cov'
          pre-dependencies: 'apf-base==1.0.7'
          test-command: 'python -m pytest -x alerce-reflector-step/tests/unittest --cov alerce-reflector-step/cmirrormaker --cov-report xml'
      - name: integration
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.7'
          sources-folder: 'alerce-reflector-step/alerce-reflector-step/'
          test-folder: 'alerce-reflector-step/tests/integration'
          test-dependencies: 'pytest pytest-docker pytest-cov'
          pre-dependencies: 'apf-base==1.0.7'
          codecov-flags: ''  # Do not upload
          test-command: 'python -m pytest -x alerce-reflector-step/tests/integration'

  alert_archiving_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.alert_archiving_step == 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 'alert_archiving_step/alert_archiving_step/'
      - name: unittest
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.7'
          sources-folder: 'alert_archiving_step/alert_archiving_step/'
          test-folder: 'alert_archiving_step/tests/unittest'
          test-dependencies: 'pytest pytest-docker pytest-cov numpy fastavro'
          requirements-file: 'alert_archiving_step/requirements.txt'
          test-command: 'python -m pytest -x alert_archiving_step/tests/unittest --cov alert_archiving_step/alert_archiving_step --cov-report xml'
      - name: unittest_cli
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.7'
          sources-folder: 'alert_archiving_step/alert_archiving_step/'
          test-folder: 'alert_archiving_step/tests/cli'
          test-dependencies: 'pytest pytest-docker pytest-cov'
          requirements-file: 'alert_archiving_step/requirements_cli.txt'
          test-command: 'python -m pytest -x alert_archiving_step/tests/cli --cov alert_archiving_step/cli --cov-report xml'
      - name: integration
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.7'
          sources-folder: 'alert_archiving_step/alert_archiving_step/'
          test-folder: 'alert_archiving_step/tests/integration'
          test-dependencies: 'pytest pytest-docker numpy Cython'
          requirements-file: 'alert_archiving_step/requirements.txt'
          codecov-flags: ''  # Do not upload
          test-command: 'python -m pytest -x alert_archiving_step/tests/integration'

  consolidated_metrics_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.consolidated_metrics_step == 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 'consolidated_metrics_step/consolidated_metrics_step/'
      - name: unittest
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.7'
          sources-folder: 'consolidated_metrics_step/consolidated_metrics_step/'
          test-folder: 'consolidated_metrics_step/tests/unit'
          test-dependencies: 'pytest pytest-cov numpy fastavro faker'
          requirements-file: 'alert_archiving_step/requirements.txt'
          test-command: 'python -m pytest -x consolidated_metrics_step/tests/unit --cov consolidated_metrics_step/consolidated_metrics_step --cov-report xml'
      - name: integration
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.7'
          sources-folder: 'consolidated_metrics_step/consolidated_metrics_step/'
          test-folder: 'consolidated_metrics_step/tests/integration'
          test-dependencies: 'pytest pytest-docker numpy faker'
          requirements-file: 'alert_archiving_step/requirements.txt'
          codecov-flags: ''  # Do not upload
          test-command: 'python -m pytest -x consolidated_metrics_step/tests/integration'

  correction_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.correction_step == 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 'correction_step/correction'
      - name: unittest
        uses: ./.github/workflows/poetry-tests-template.yaml
        with:
          python-version: '3.10'
          sources-folder: 'correction_step/correction'
          test-folder: 'correction_step/tests/unittests'
      - name: integration
        uses: ./.github/workflows/poetry-tests-template.yaml
        with:
          python-version: '3.10'
          sources-folder: 'correction_step/correction'
          test-folder: 'correction_step/tests/integration'
          codecov-flags: ''  # Do not upload

  feature_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.feature_step == 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 'feature_step/feature_step/'
      - name: unittest
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.10'
          sources-folder: 'feature_step/feature_step/'
          test-folder: 'feature_step/tests/unittest'
          test-dependencies: 'pytest pytest-cov'
          requirements-file: 'feature_step/requirements.txt'
          codecov-flags: ''  # Do not upload
          test-command: 'python -m pytest -x feature_step/tests/unittest --cov feature_step/features--cov-report xml'
      - name: integration
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.10'
          sources-folder: 'feature_step/alerce-reflector-step/'
          test-folder: 'feature_step/tests/integration'
          test-dependencies: 'pytest pytest-docker'
          requirements-file: 'feature_step/requirements.txt'
          codecov-flags: ''  # Do not upload
          test-command: 'python -m pytest -x feature_step/tests/integration'

  lc_classification_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.lc_classification_step == 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 'lc_classification_step/lc_classification'
      - name: unittest_ztf
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.8'
          requirements-file: 'lc_classification_step/requirements_ztf.txt'
          test-command: STREAM=ztf python -m pytest -x lc_classification_step/tests/unit --cov lc_classification/lc_classification --cov-report xml
        secrets:
          GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
      - name: integration_ztf
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.8'
          requirements-file: 'lc_classification_step/requirements_ztf.txt'
          test-dependencies: pytest pytest-docker
          test-command: STREAM=ztf python -m pytest -x lc_classification_step/tests/integration
          codecov-flags: ''  # Do not upload
        secrets:
          GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
      - name: unittest_elastic
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.8'
          requirements-file: 'lc_classification_step/requirements_elasticc.txt'
          test-command: STREAM=elasticc python -m pytest -x lc_classification_step/tests/unit --cov lc_classification/lc_classification --cov-report xml
        secrets:
          GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'
      - name: integration_elastic
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.8'
          requirements-file: 'lc_classification_step/requirements_elasticc.txt'
          test-dependencies: pytest pytest-docker
          test-command: STREAM=elasticc python -m pytest -x lc_classification_step/tests/integration
          codecov-flags: ''  # Do not upload
        secrets:
          GH_TOKEN: '${{ secrets.ADMIN_TOKEN }}'

  lightcurve_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.lightcurve_step == 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 'lightcurve_step/lightcurve_step' 
      - name: unittest
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: "3.9"
          sources-folder: "lightcurve_step/lightcurve_step"
          test-folder: "lightcurve_step/tests/unittest"
          test-dependencies: "pytest pytest-cov"
          test-command: "python -m pytest -x lightcurve_step/tests/unittest --cov lightcurve_step/lightcurve_step --cov-report xml"
      - name: integration
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: "3.9"
          sources-folder: "lightcurve_step/lightcurve_step"
          test-folder: "lightcurve_step/tests/integration"
          test-dependencies: "pytest pytest-docker"
          codecov-flags: "" # Do not upload
          test-command: "python -m pytest -x lightcurve_step/tests/integration"

  magstats_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.magstats_step == 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 'magstats_step/magstats_step'
      - name: unittest
        uses: ./.github/workflows/poetry-tests-template.yaml
        with:
          python-version: '3.9'
          sources-folder: 'magstats_step/magstats_step'
          test-folder: 'magstats_step/tests/unittests'
      - name: integration
        uses: ./.github/workflows/poetry-tests-template.yaml
        with:
          python-version: '3.9'
          sources-folder: 'magstats_step/magstats_step'
          test-folder: 'magstats_step/tests/integration'
          codecov-flags: ''  # Do not upload

  prv_candidates_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.prv_candidates_step == 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: "prv_candidates_step/prv_candidates_step"
      - name: unittest
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: "3.10"
          sources-folder: "prv_candidates_step/prv_candidates_step"
          test-folder: "prv_candidates_step/tests/unit"
          test-dependencies: "pytest pytest-cov pytest-mock"
          test-command: "python -m pytest -x prv_candidates_step/tests/unit --cov prv_candidates_step/prv_candidates_step --cov-report xml"
      - name: integration
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: "3.10"
          sources-folder: "prv_candidates_step/prv_candidates_step"
          test-folder: "prv_candidates_step/tests/integration"
          test-dependencies: "pytest pytest-docker pytest-mock"
          codecov-flags: "" # Do not upload
          test-command: "python -m pytest -x prv_candidates_step/tests/integration"

  s3_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.s3_step== 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 's3_step/s3_step/'
      - name: unittest
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.9'
          sources-folder: 's3_step/s3_step/'
          test-folder: 's3_step/tests/unit'
          test-dependencies: 'pytest pytest-cov'
          requirements-file: 's3_step/requirements.txt'
          test-command: 'python -m pytest -x s3_step/tests/unit --cov s3_step/s3_step/ --cov-report xml'
      - name: integration
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.9'
          sources-folder: 's3_step/s3_step/'
          test-folder: 's3_step/tests/integration'
          test-dependencies: 'pytest pytest-docker moto'
          requirements-file: 's3_step/requirements.txt'
          codecov-flags: ''  # Do not upload
          test-command: 'python -m pytest -x s3_step/tests/integration'

  sorting_hat_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.sorting_hat_step== 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 'sorting_hat_step/sorting_hat_step'
      - name: unittest
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.8'
          sources-folder: 'sorting_hat_step/sorting_hat_step'
          test-folder: 'sorting_hat_step/tests/unittest'
          test-dependencies: "pytest pytest-cov 'moto[secretsmanager]'"
          pre-dependencies: 'numpy'
          test-command: 'python -m pytest -x sorting_hat_step/tests/unittest --cov sorting_hat_step/sorting_hat_step --cov-report xml'
      - name: integration
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.8'
          sources-folder: 'sorting_hat_step/sorting_hat_step'
          test-folder: 'sorting_hat_step/tests/integration'
          test-dependencies: 'requests confluent_kafka numpy pymongo pytest pytest-docker pytest-cov'
          pre-dependencies: 'numpy'
          codecov-flags: ''  # Do not upload
          test-command: 'python -m pytest -x sorting_hat_step/tests/integration'

  watchlist_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.stamp_watchlist_step== 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 'watchlist_step/watchlist_step/'
      - name: unittest
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.8'
          sources-folder: 'watchlist_step/watchlist_step/'
          test-folder: 'watchlist_step/tests/unit'
          test-dependencies: 'pytest pytest-cov'
          requirements-file: 'watchlist_step/requirements.txt'
          test-command: 'python -m pytest -x watchlist_step/tests/unit --cov watchlist_step/watchlist_step/ --cov-report xml'
      - name: integration
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.9'
          sources-folder: 'watchlist_step/watchlist_step/'
          test-folder: 'watchlist_step/tests/integration'
          test-dependencies: 'pytest==7.2.0 pytest-docker'
          requirements-file: 'watchlist_step/requirements.txt'
          codecov-flags: ''  # Do not upload
          test-command: 'python -m pytest -x watchlist_step/tests/integration'

  xmatch_step_tests:
    runs-on: ubuntu-latests
    needs: detect_changes
    if: needs.detect_changes.outputs.xmatch_step== 'true'
    steps:
      - name: lint
        uses: ./.github/workflows/lint-template.yaml
        with:
          sources-folder: 'xmatch_step/xmatch_step/'
      - name: unittest
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.7'
          sources-folder: 'xmatch_step/xmatch_step/'
          test-folder: 'xmatch_step/tests/unit'
          test-dependencies: 'pytest pytest-cov'
          requirements-file: 'xmatch_step/requirements.txt'
          test-command: 'python -m pytest -x xmatch_step/tests/unit --cov xmatch_step/xmatch_step/ --cov-report xml'
      - name: integration
        uses: ./.github/workflows/pip-tests-template.yaml
        with:
          python-version: '3.7'
          sources-folder: 'xmatch_step/xmatch_step/'
          test-folder: 'xmatch_step/tests/integration'
          test-dependencies: 'pytest pytest-docker numpy Cython psycopg2'
          requirements-file: 'xmatch_step/requirements.txt'
          codecov-flags: ''  # Do not upload
          test-command: 'python -m pytest -x xmatch_step/tests/integration'