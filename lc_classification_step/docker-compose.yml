version: "3"
services:
  zookeeper:
    image: "bitnami/zookeeper:latest"
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: "bitnami/kafka:3.3.1"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://127.0.0.1:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  balto:
    build:
      context: .
      dockerfile: ./Dockerfile-balto
      args:
        GH_TOKEN: ${GH_TOKEN}
      tags:
        - "balto:local"
    environment:
      - CONSUMER_CLASS=apf.consumers.KafkaConsumer
      - CONSUMER_TOPICS="features"
      - CONSUMER_SERVER="localhost:9092"
      - CONSUMER_GROUP_ID="lc_classification"
      - PRODUCER_TOPIC_FORMAT="format%s"
      - PRODUCER_DATE_FORMAT="YYYYmmdd"
      - PRODUCER_CHANGE_HOUR=22
      - PRODUCER_RETENTION_DAYS=1
      - PRODUCER_SERVER="localhost:9092"
      - SCRIBE_SERVER="localhost:9092"
      - SCRIBE_TOPIC=w_object
      - METRICS_HOST="localhost:9092"
      - METRICS_TOPIC=metrics
      - CONSUME_TIMEOUT=0
      - CONSUME_MESSAGES=2
      - PREDICTOR_CLASS=lc_classification.predictors.balto.balto_predictor.BaltoPredictor
      - MODEL_PATH=${BALTO_MODEL_PATH}
      - QUANTILES_PATH=${BALTO_QUANTILES_PATH}
      - PREDICTOR_PARSER_CLASS=lc_classification.predictors.balto.balto_parser.BaltoParser
      - SCRIBE_PARSER_CLASS=lc_classification.core.parsers.scribe_parser.ScribeParser
      - STEP_PARSER_CLASS=lc_classification.core.parsers.alerce_parser.AlerceParser
